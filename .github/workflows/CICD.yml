name: CI/CD_main

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Get short SHA
        id: slug
        run: echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: 'testDB'
          mysql user: 'test'
          mysql password: 'testPW'

#      - name: Create application.properties
#        env:
#          APP_PROPS: ${{ secrets.APPLICATION_PROPERTIES }}
#        run: |
#          mkdir -p src/main/resources
#          echo "$APP_PROPS" > src/main/resources/application.properties

      - name: Create application.properties
        run: |
          cat <<EOT > ./src/main/resources/application.properties
          commit.hash=${{ steps.slug.outputs.sha7 }}
          api.server.url=${{ secrets.API_URL }}
          spring.datasource.url=${{ secrets.DB_URL }}
          spring.datasource.username=${{ secrets.DB_USERNAME }}
          spring.datasource.password=${{ secrets.DB_PASSWORD }}
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          spring.jpa.properties.hibernate.show_sql=true
          spring.jpa.properties.hibernate.format_sql=true
          spring.jpa.hibernate.ddl-auto=create
          
          # S3
          cloud.aws.credentials.accessKey=${{ secrets.AWS_ACCESS_KEY_ID }}
          cloud.aws.credentials.secretKey=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          cloud.aws.s3.bucket=${{ secrets.AWS_BUCKET_NAME }}
          cloud.aws.s3.bucket-path=${{ secrets.AWS_BUCKET_PATH }}
          
          # JWT Secret
          spring.jwt.secret=${{ secrets.JWT_SECRET }}
      
          # Kakao OAuth2 Configuration
          spring.security.oauth2.client.registration.kakao.client-name=${{ secrets.KAKAO_CLIENT_NAME }}
          spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }}
          spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_CLIENT_SECRET }}
          spring.security.oauth2.client.registration.kakao.redirect-uri=${{ secrets.KAKAO_REDIRECT_URI }}
          spring.security.oauth2.client.registration.kakao.authorization-grant-type=${{ secrets.KAKAO_AUTH_GRANT_TYPE }}
          spring.security.oauth2.client.registration.kakao.client-authentication-method=${{ secrets.KAKAO_AUTH_METHOD }}
          spring.security.oauth2.client.registration.kakao.scope=${{ secrets.KAKAO_SCOPE }}
      
          spring.security.oauth2.client.provider.kakao.authorization-uri=${{ secrets.KAKAO_AUTHORIZATION_URI }}
          spring.security.oauth2.client.provider.kakao.token-uri=${{ secrets.KAKAO_TOKEN_URI }}
          spring.security.oauth2.client.provider.kakao.user-info-uri=${{ secrets.KAKAO_USER_INFO_URI }}
          spring.security.oauth2.client.provider.kakao.user-name-attribute=${{ secrets.KAKAO_USER_NAME_ATTRIBUTE }}
          
          front-url=${{ secrets.FRONT_URL }}
          redirect-url-suffix=/api/users/home
          
          EOT
        shell: bash


      - name: Generate test-application.properties
        run: |
          echo "cloud.aws.credentials.accessKey=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ./src/test/resources/application.properties
          echo "cloud.aws.credentials.secretKey=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ./src/test/resources/application.properties
          echo "cloud.aws.s3.bucket=${{ secrets.AWS_BUCKET_NAME }}" >> ./src/test/resources/application.properties
          echo "cloud.aws.s3.bucket-path=${{ secrets.AWS_BUCKET_PATH }}" >> ./src/test/resources/application.properties
          
          echo "spring.jwt.secret=${{ secrets.JWT_SECRET }}" >> ./src/test/resources/application.properties
          
          echo "spring.security.oauth2.client.registration.kakao.client-name=${{ secrets.KAKAO_CLIENT_NAME }}" >> ./src/test/resources/application.properties
          echo "spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }}" >> ./src/test/resources/application.properties
          echo "spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_CLIENT_SECRET }}" >> ./src/test/resources/application.properties
          echo "spring.security.oauth2.client.registration.kakao.redirect-uri=${{ secrets.KAKAO_REDIRECT_URI }}" >> ./src/test/resources/application.properties
          echo "spring.security.oauth2.client.registration.kakao.authorization-grant-type=${{ secrets.KAKAO_AUTH_GRANT_TYPE }}" >> ./src/test/resources/application.properties
          echo "spring.security.oauth2.client.registration.kakao.client-authentication-method=${{ secrets.KAKAO_AUTH_METHOD }}" >> ./src/test/resources/application.properties
          echo "spring.security.oauth2.client.registration.kakao.scope=${{ secrets.KAKAO_SCOPE }}" >> ./src/test/resources/application.properties
          
          echo "spring.security.oauth2.client.provider.kakao.authorization-uri=${{ secrets.KAKAO_AUTHORIZATION_URI }}" >> ./src/test/resources/application.properties
          echo "spring.security.oauth2.client.provider.kakao.token-uri=${{ secrets.KAKAO_TOKEN_URI }}" >> ./src/test/resources/application.properties
          echo "spring.security.oauth2.client.provider.kakao.user-info-uri=${{ secrets.KAKAO_USER_INFO_URI }}" >> ./src/test/resources/application.properties
          echo "spring.security.oauth2.client.provider.kakao.user-name-attribute=${{ secrets.KAKAO_USER_NAME_ATTRIBUTE }}" >> ./src/test/resources/application.properties
          
          echo "front-url=${{ secrets.FRONT_URL }}" >> ./src/test/resources/application.properties
          echo "redirect-url-suffix=/api/users/home" >> ./src/test/resources/application.properties
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run Spotless Apply
        run: ./gradlew spotlessApply

      - name: Build with Gradle
        run: |
          chmod +x gradlew 
          ./gradlew build

      - name: Docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} . 
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            # 기존 컨테이너 종료 및 제거
            echo "Stopping and removing existing Docker containers..."
            sudo docker rm -f $(sudo docker ps -aq) || echo "No containers to remove"

            # 최신 Docker 이미지 가져오기
            echo "Pulling the latest Docker image..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

            # Docker Compose를 통해 새 컨테이너 실행
            echo "Starting deployment with Docker Compose..."

            cd ~
            sudo docker-compose up -d --build

            # 사용하지 않는 Docker 이미지 정리
            echo "Cleaning up unused Docker images..."
            sudo docker image prune -f || echo "No images to prune"